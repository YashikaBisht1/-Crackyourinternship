q1
  bool inside(int i, int j, int n, int m) {
    return (0 <= i) && (i < n) && (0 <= j) && (j < m);
}

void dfs(int i, int j, vector<vector<int>>& image, int originalColor, int newColor) {
    if (!inside(i, j, image.size(), image[0].size()) || image[i][j] != originalColor) return;
    
    image[i][j] = newColor;
    dfs(i + 1, j, image, originalColor, newColor);
    dfs(i - 1, j, image, originalColor, newColor);
    dfs(i, j + 1, image, originalColor, newColor);
    dfs(i, j - 1, image, originalColor, newColor);
}

vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
    int n = image.size();
    int m = image[0].size();
    int originalColor = image[sr][sc];
    
    if (originalColor != color) {
        dfs(sr, sc, image, originalColor, color);
    }
    
    return image;
}
q2
  class Solution {
  void solve(int i, int j, vector < vector < int >> & a, int n, vector < string > & ans, string move,
    vector < vector < int >> & vis, int di[], int dj[]) {
    if (i == n - 1 && j == n - 1) {
      ans.push_back(move);
      return;
    }
    string dir = "DLRU";
    for (int ind = 0; ind < 4; ind++) {
      int nexti = i + di[ind];
      int nextj = j + dj[ind];
      if (nexti >= 0 && nextj >= 0 && nexti < n && nextj < n && !vis[nexti][nextj] && a[nexti][nextj] == 1) {
        vis[i][j] = 1;
        solve(nexti, nextj, a, n, ans, move + dir[ind], vis, di, dj);
        vis[i][j] = 0;
      }
    }

  }
  public:
    vector < string > findPath(vector < vector < int >> & m, int n) {
      vector < string > ans;
      vector < vector < int >> vis(n, vector < int > (n, 0));
      int di[] = {
        +1,
        0,
        0,
        -1
      };
      int dj[] = {
        0,
        -1,
        1,
        0
      };
      if (m[0][0] == 1) solve(0, 0, m, n, ans, "", vis, di, dj);
      return ans;
    }
};
q3
  Use dfs to find a union region.
Use bfs to find the shortest path.
  class Solution {
public://recursively call dfs on all the cell's neighbours multi source bfs
     void dfs(int i,int j,vector<vector<int>>& grid,queue<pair<int,int>>& q){
        if(i<0 || i>=grid.size() || j>=grid.size() || j<0 || grid[i][j]==-1 || grid[i][j]==0) return;
        grid[i][j]=-1;//mark as visited
        q.push({i,j});
        dfs(i,j-1,grid,q);
        dfs(i,j+1,grid,q);
        dfs(i-1,j,grid,q);
        dfs(i+1,j,grid,q);
    }
    int shortestBridge(vector<vector<int>>& grid) {
        int n=grid.size();
        queue<pair<int,int>>q;
        int b=true;
        for(int i=0;i<n;i++){
            if(b){
                for(int j=0;j<n;j++){
                    if(grid[i][j]==1){
                        dfs(i,j,grid,q);
                        b=false;
                        break;
                    }
                }
            }
        }//once the island is found check its shortest neighbouring islands
        int ans=0;
        int r[]={-1,1,0,0};
        int c[]={0,0,-1,1};
        while(!q.empty()){
            int a=q.size();
            while(a--){
                int i=q.front().first;
                int j=q.front().second;
                q.pop();
                for(int k=0;k<4;k++){
                    int nr=i+r[k];
                    int nc=j+c[k];
                    if(nr<0 || nr>=n || nc<0 || nc>=n || grid[nr][nc]==-1) continue;
                    if(grid[nr][nc]==1) return ans;
                    grid[nr][nc]=-1;
                    q.push({nr,nc});
                }
            }
            ans++;
            }
            return ans;
        }
    
};
  
