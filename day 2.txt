q1
  class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int zero=0;
        for(int i=0;i<nums.size();i++){
        if(nums[i]!=0){
            swap(nums[i],nums[zero]);
            zero++;
        }
        }
    }
};
q2
  class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int ans=0;
        int mini=prices[0];
        for(int i=0;i<prices.size();i++){
            int curProfit=prices[i]-mini;
            ans=max(ans,curProfit);
            mini=min(mini,prices[i]);
        }
        return ans;
    }
};
q3
  int findMinDiff(vector<int> A, int N, int M) {
    if (M == 0 || N == 0)
        return 0;

    sort(A.begin(), A.end());

    int min_diff = INT_MAX;

    for (int i = 0; i + M - 1 < N; i++) {
        int diff = A[i + M - 1] - A[i];
        if (diff < min_diff)
            min_diff = diff;
    }
    return min_diff;
}
q4
  class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int>ans;
        unordered_map<int,int>map;
        for(int i=0;i<nums.size();i++){
            if(map.find(target-nums[i])!=map.end()){
                ans.push_back(map[target-nums[i]]);
                ans.push_back(i);
            }
            map[nums[i]]=i;
        }
        return ans;
    }
};
q5 
  class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int max = 0;
        int start = prices[0];
        int len = prices.size();
        for(int i = 1;i<len; i++){
            if(start < prices[i]){
                max += prices[i] - start;
            }
            start = prices[i];
        }
        return max;
    }
};
