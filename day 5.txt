q1
  bool DFS(int node,int parent,vector<int>adj[],vector<bool>visited){
	visited[node]=true;
	for(int neighbour:adj[node]){
		if(!visited[neighbour]){
			if(dfs(neighbour,node,adj,visited)) return true;
			}
			else if(neighbour!=parent){
				return true;
				}
			}
		return false
	}
	bool isCycle(int V,vector<int>adj[]){
		vector<bool>visited(V,false);
		for(int i=0;i<V;i++){
			if(!visited[i]){
				if(dfs(i,-1,adj,visited)){
					return true;
					}
				}
			return false;
			}

q2
  vector<int> bfsOfGraph(int V, vector<int> adj[]) {
        // Code here
        queue<int>q;
        vector<bool>visited(V,false);
        vector<int>bfs;
        q.push(0);
        visited[0]=true;
        while(!q.empty()){
            int curr=q.front();
            q.pop();
            bfs.push_back(curr);
            for(int neighbour:adj[curr]){
                if(!visited[neighbour]){
                    q.push(neighbour);
                    visited[neighbour]=true;
                }
            }
        }
        return bfs;
    }
q3
  void dfsUtil(int node, vector<int> adj[], vector<bool> &visited, vector<int> &dfs) {
    visited[node] = true;
    dfs.push_back(node);
    for (int neighbour : adj[node]) {
        if (!visited[neighbour]) {
            dfsUtil(neighbour, adj, visited, dfs);
        }
    }
}

vector<int> dfsOfGraph(int V, vector<int> adj[]) {
    vector<bool> visited(V, false);
    vector<int> dfs;
    dfsUtil(0, adj, visited, dfs);
    return dfs;
}
q4
  //{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
  bool dfs(int index, vector<int> adj[],vector<int> &visited,vector<int> &pathvisited,int V){
        visited[index] = 1;
        pathvisited[index] = 1;
        
        for(int i=0;i<adj[index].size();i++){
            if(visited[adj[index][i]] == 0){
                if(dfs(adj[index][i],adj,visited,pathvisited,V)) return true;
            }
            else if(pathvisited[adj[index][i]] == 1){
                return true;
            }
        }
        
        pathvisited[index] = 0;
        return false;
    }
    
    bool isCyclic(int V, vector<int> adj[]) {
        // code here
        vector<int> visited(V,0);
        vector<int> pathvisited(V,0);
        
        for(int i=0;i<V;i++){
            if(visited[i] == 0){
                if(dfs(i,adj,visited,pathvisited,V)) return true;
            }
        }
        
        return false;
    }


};
q5
  int n,m;
bool inside(int i,int j){
	return (0<=i) &&(i<n) &&(0<=j) && (j<m);
	}
void dfs(int i,int j,vector<vector<char>>&grid){
	 if (!inside(i, j)) return;
        if (grid[i][j]=='1'){
            grid[i][j]='2';
            dfs(i+1,j, grid);
            dfs(i,j+1, grid);
            dfs(i-1,j, grid);
            dfs(i,j-1, grid);
        }           
    }
    int numIslands(vector<vector<char>>& grid) {
        n=grid.size();
        m=grid[0].size();
        int num=0;
        for(int i=0; i<n; i++)
            for(int j=0; j<m; j++){
                if(grid[i][j]=='1'){
                    num++;
                    dfs(i, j, grid);   
                }
            }
        return num;
    }
